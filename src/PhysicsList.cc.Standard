#include "PhysicsList.hh"

PhysicsList::PhysicsList()
{
  BeamOut = NULL;
}

PhysicsList::PhysicsList(Outgoing_Beam* BO):BeamOut(BO)
{;}

PhysicsList::~PhysicsList()
{;}

void PhysicsList::ConstructParticle()
{
  // In this method, static member functions should be called
  // for all particles which you want to use.
  // This ensures that objects of these particle types will be
  // created in the program. 

  G4Gamma::GammaDefinition();
  G4Electron::ElectronDefinition();
  G4Positron::PositronDefinition();
  G4MuonMinus::MuonMinusDefinition();
  G4MuonPlus::MuonPlusDefinition();
  //  ions
  G4IonConstructor iConstructor;
  iConstructor.ConstructParticle();
  
}

void PhysicsList::ConstructProcess()
{
  // Define transportation process

  AddTransportation();
  ConstructEM();
}

void PhysicsList::ConstructEM()
{
  theParticleIterator->reset();

  while( (*theParticleIterator)() ){

    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();

    G4cout<<"++++ Particle name ="<<particleName<<G4endl;
    if (particleName == "gamma") {

      // Low Energy EM processes (deprecated) =================================
      //pmanager->AddDiscreteProcess(new G4LowEnergyPhotoElectric);
      //pmanager->AddDiscreteProcess(new G4LowEnergyCompton);
      //pmanager->AddDiscreteProcess(new G4LowEnergyGammaConversion);
      //pmanager->AddDiscreteProcess(new G4LowEnergyRayleigh);

      // Standard EM processes
      pmanager->AddDiscreteProcess(new G4PhotoElectricEffect());
      pmanager->AddDiscreteProcess(new G4ComptonScattering());
      pmanager->AddDiscreteProcess(new G4GammaConversion());
      pmanager->AddDiscreteProcess(new G4RayleighScattering());

    }
    else if (particleName == "e-") {

      pmanager->AddProcess(new G4eMultipleScattering,-1,1,1);

      // Standard EM processes =================================================
      pmanager->AddProcess(new G4eIonisation,       -1,2,2);
      pmanager->AddProcess(new G4eBremsstrahlung,   -1,-3,3);     

    }
    else if (particleName == "e+") {

      pmanager->AddProcess(new G4eMultipleScattering,-1,1,1);

      // Standard EM processes =================================================
      pmanager->AddProcess(new G4eIonisation,       -1,2,2);
      pmanager->AddProcess(new G4eBremsstrahlung,   -1,3,3);     
      pmanager->AddProcess(new G4eplusAnnihilation,  0,-1,4); 

    }
    else if( particleName == "GenericIon" ) {

      pmanager->AddProcess(new G4hMultipleScattering, -1, 1, 1);
      pmanager->AddProcess(new G4ionIonisation,      -1, 2, 2);
      //      pmanager->AddProcess(new Reaction(BeamOut),    -1,-1, 3);
      pmanager->AddProcess(new Reaction(BeamOut),    3,-1, 3); // At Rest, PostStep
      pmanager->AddProcess(new G4StepLimiter,       -1,-1, 4);

    } 

  }

}

void PhysicsList::SetCuts()
{
  // uppress error messages even in case e/gamma/proton do not exist            
  G4int temp = GetVerboseLevel();                                                
  SetVerboseLevel(0);                                                           
  //  " G4VUserPhysicsList::SetCutsWithDefault" method sets 
  //   the default cut value for all particle types 
  SetCutsWithDefault();   

  // Retrieve verbose level
  SetVerboseLevel(temp);  
}
